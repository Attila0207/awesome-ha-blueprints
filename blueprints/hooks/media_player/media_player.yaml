# Blueprint metadata
blueprint:
  name: Hook - Media Player
  description: |
    Hook automation which allows to control a media player. Supports volume setting, play/pause and track selection. Features may vary depending on the selected Controller.

    An automation created with this blueprint must be linked to a [Controller](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers) automation.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    They expose an abstract interface used by Hooks to create controller-based automations.

    Full documentation and a list of Controllers supported by this Hook are available [here](https://epmatt.github.io/awesome-ha-blueprints/blueprints/hooks/media_player).
  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/hooks/media_player/media_player.yaml
  domain: automation
  input:
    controller_device:
      name: Controller device
      description: The controller device which will control the light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        device:
    controller_entity:
      name: Controller entity
      description: The controller entity which will control the light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: Controller model
      description: The model for the controller used in this automation. Choose a value from the list of supported controllers.
      selector:
        select:
          options:
            - 'IKEA E1524/E1810 5-Button remote'
            - 'IKEA E1743 On/Off Switch'
            - 'IKEA E1744 SYMFONISK rotary remote'
    media_player:
      name: Media Player
      description: Media player which will be controlled with this automation.
      selector:
        entity:
          domain: media_player

# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_model: !input controller_model
  # Blueprint data
  supported_controllers:
    'IKEA E1524/E1810 5-Button remote': ikea_e1524_e1810
    'IKEA E1743 On/Off Switch & Dimmer': ikea_e1743
    'IKEA E1744 SYMFONISK rotary remote': ikea_e1744
  controller_mapping:
    ikea_e1524_e1810:
      volume_up: button_up_short
      volume_up_repeat: button_up_long
      volume_down: button_down_short
      volume_down_repeat: button_down_long
      next_track: button_right_short
      prev_track: button_left_short
      stop: button_center_hold
      play_pause: button_center_short
    ikea_e1743:
      volume_up: button_up_short
      volume_up_repeat: button_up_long
      volume_down: button_down_short
      volume_down_repeat: button_down_long
      next_track: button_up_double
      play_pause: button_down_double
    ikea_e1744:
      volume_up_repeat: rotate_right
      volume_down_repeat: rotate_left
      next_track: click_double
      prev_track: click_triple
      play_pause: click
  # extract controller ids
  controller_id: '{{ controller_entity if controller_device == "" else controller_device }}'
  controller_model_id: '{{ supported_controllers[controller_model] }}'
  # pre-choose actions for buttons based on configured controller
  # no need to perform this task at automation runtime
  volume_up: '{{controller_mapping[controller_model_id]["volume_up"]}}'
  volume_up_repeat: '{{controller_mapping[controller_model_id]["volume_up_repeat"]}}'
  volume_down: '{{controller_mapping[controller_model_id]["volume_down"]}}'
  volume_down_repeat: '{{controller_mapping[controller_model_id]["volume_down_repeat"]}}'
  next_track: '{{controller_mapping[controller_model_id]["next_track"]}}'
  prev_track: '{{controller_mapping[controller_model_id]["prev_track"]}}'
  stop: '{{controller_mapping[controller_model_id]["stop"]}}'
  play_pause: '{{controller_mapping[controller_model_id]["play_pause"]}}'

# mode restart ensures long actions are interrupted when the release action is received
mode: restart
max_exceeded: silent

trigger:
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_device
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_entity
condition:
action:
  - variables:
      action: '{{trigger.event.data.action}}'
  - choose:
      - conditions: '{{ action == play_pause }}'
        sequence:
          - service: media_player.media_play_pause
            entity_id: !input media_player
      - conditions: '{{ action == stop }}'
        sequence:
          - service: media_player.media_stop
            entity_id: !input media_player
      - conditions: '{{ action == next_track }}'
        sequence:
          - service: media_player.media_next_track
            entity_id: !input media_player
      - conditions: '{{ action == prev_track }}'
        sequence:
          - service: media_player.media_previous_track
            entity_id: !input media_player
      - conditions: '{{ action == volume_up }}'
        sequence:
          - service: media_player.volume_up
            entity_id: !input media_player
      - conditions: '{{ action == volume_down }}'
        sequence:
          - service: media_player.volume_down
            entity_id: !input media_player
      - conditions: '{{ action == volume_up_repeat }}'
        sequence:
          - repeat:
              while: '{{ true }}'
              sequence:
                - service: media_player.volume_up
                  entity_id: !input media_player
                - delay:
                    milliseconds: 250
      - conditions: '{{ action == volume_down_repeat }}'
        sequence:
          - repeat:
              while: '{{ true }}'
              sequence:
                - service: media_player.volume_down
                  entity_id: !input media_player
                - delay:
                    milliseconds: 250
