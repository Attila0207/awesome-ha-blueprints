# Blueprint metadata
blueprint:
  name: Hook - Light
  description: '
    Hook automation which allows to control a light. Supports brightness and color control both for white temperature and rgb lights. Features may vary depending on the selected Controller.

    An automation created with this blueprint must be linked to a [Controller](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers) automation.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    They expose an abstract interface used by Hooks to create controller-based automations.

    Full documentation and a list of Controllers supported by this Hook are available [here](https://epmatt.github.io/awesome-ha-blueprints/blueprints/hooks/light).
    '
  domain: automation
  input:
    controller_device:
      name: Controller Device
      description: The controller device which will control the light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as a Device. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        device:
    controller_entity:
      name: Controller Entity
      description: The controller entity which will control the light. Choose a value only if the integration used to connect the controller to Home Assistant exposes it as an Entity. This value should match the one specified in the corresponding Controller automation.
      default: ''
      selector:
        entity:
          domain: sensor
    controller_model:
      name: Controller model
      description: The model for the controller used in this automation.
      selector:
        select:
          options:
            - 'IKEA E1524/E1810 5-Button remote'
            - 'IKEA E1743 On/Off Switch'
    light:
      name: Light
      description: Light which will be controlled with this automation.
      selector:
        entity:
          domain: light
    light_color_mode:
      name: Light color mode
      description: Specify how the controller will set the light color. Choose "Color Temperature" and "Hue - Saturation" depending on the features supported by your light. If you are not sure you can select "Auto".
      default: 'Auto'
      selector:
        select:
          options:
            - 'Auto'
            - 'Hue - Saturation'
            - 'RGB'
    light_transition:
      name: Light Transition
      description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box

# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_model: !input controller_model
  light_color_mode: !input light_color_mode
  light: !input light
  light_transition: !input light_transition
  # Blueprint data
  supported_color_modes:
    'Auto': auto
    'Color Temperature': color_temp
    'Hue - Saturation': hs_color
  supported_controllers:
    'IKEA E1524/E1810 5-Button remote': ikea_e1524_e1810
    'IKEA E1743 On/Off Switch & Dimmer': ikea_e1743
  controller_mapping:
    ikea_e1524_e1810:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      color_up: button_right_short
      color_up_repeat: button_right_long
      color_down: button_left_short
      color_down_repeat: button_left_long
      toggle: button_center_short
    ikea_e1743:
      turn_on: button_up_short
      turn_off: button_down_short
      brightness_up_repeat: button_up_long
      brightness_down_repeat: button_down_long
      color_up: button_up_double
      color_down: button_down_double
  # extract controller ids
  controller_id: '{{ controller_entity if controller_device == "" else controller_device }}'
  controller_model_id: '{{ supported_controllers[controller_model] }}'
  # pre-choose actions for buttons based on configured controller
  # no need to perform this task at automation runtime
  brightness_up: '{{controller_mapping[controller_model_id]["brightness_up"]}}'
  brightness_up_repeat: '{{controller_mapping[controller_model_id]["brightness_up_repeat"]}}'
  brightness_down: '{{controller_mapping[controller_model_id]["brightness_down"]}}'
  brightness_down_repeat: '{{controller_mapping[controller_model_id]["brightness_down_repeat"]}}'
  color_up: '{{controller_mapping[controller_model_id]["color_up"]}}'
  color_up_repeat: '{{controller_mapping[controller_model_id]["color_up_repeat"]}}'
  color_down: '{{controller_mapping[controller_model_id]["color_down"]}}'
  color_down_repeat: '{{controller_mapping[controller_model_id]["color_down_repeat"]}}'
  toggle: '{{controller_mapping[controller_model_id]["toggle"]}}'
  turn_on: '{{controller_mapping[controller_model_id]["turn_on"]}}'
  turn_off: '{{controller_mapping[controller_model_id]["turn_off"]}}'
  # extract light color mode id
  light_color_mode_id: >-
    {% if light_color_mode == "Auto" %}
    {{ supported_color_modes["Hue - Saturation"] if state_attr(light, "hs_color") != None else supported_color_modes["Color Temperature"] }}
    {% else %}
    {{ supported_color_modes[light_color_mode] }}
    {% endif %}

# mode restart ensures long actions are interrupted when the release action is received
mode: restart
max_exceeded: silent

trigger:
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_device
  - platform: event
    event_type: ahb_controller_event
    event_data:
      controller: !input controller_entity
condition:
action:
  - variables:
      action: '{{trigger.event.data.action}}'
  - choose:
      - conditions: '{{ action == toggle }}'
        sequence:
          - service: light.toggle
            entity_id: !input light
            data:
              transition: '{{ light_transition / 1000 }}'
      - conditions: '{{ action == turn_on }}'
        sequence:
          - service: light.turn_on
            entity_id: !input light
            data:
              transition: '{{ light_transition / 1000 }}'
      - conditions: '{{ action == turn_off }}'
        sequence:
          - service: light.turn_off
            entity_id: !input light
            data:
              transition: '{{ light_transition / 1000 }}'
      - conditions: '{{ action == brightness_up }}'
        sequence:
          - service: light.turn_on
            data:
              brightness_step_pct: 10
              transition: 0.25
              entity_id: !input light
      - conditions: '{{ action == brightness_down }}'
        sequence:
          - service: light.turn_on
            data:
              brightness_step_pct: -10
              transition: 0.25
              entity_id: !input light
      - conditions: '{{ action == brightness_up_repeat }}'
        sequence:
          - repeat:
              while: '{{ true }}'
              sequence:
                - service: light.turn_on
                  data:
                    brightness_step_pct: 10
                    transition: 0.25
                    entity_id: !input light
                - delay:
                    milliseconds: 250
      - conditions: '{{ action == brightness_down_repeat }}'
        sequence:
          - repeat:
              while: '{{ true }}'
              sequence:
                - service: light.turn_on
                  data:
                    brightness_step_pct: -10
                    transition: 0.25
                    entity_id: !input light
                - delay:
                    milliseconds: 250
      - conditions: '{{ action == color_up }}'
        sequence:
          choose:
            - conditions: '{{ light_color_mode_id == "color_temp" }}'
              sequence:
                - service: light.turn_on
                  data:
                    color_temp: '{{ state_attr(light,"color_temp")|int + 50 }}'
                    transition: 0.25
                  entity_id: !input light
            - conditions: '{{ light_color_mode_id == "hs_color" }}'
              sequence:
                - service: light.turn_on
                  data:
                    hs_color: '{{ [((state_attr(light,"hs_color")[0] or 0) + 15) % 360, 100] }}'
                    transition: 0.25
                  entity_id: !input light
      - conditions: '{{ action == color_down }}'
        sequence:
          choose:
            - conditions: '{{ light_color_mode_id == "color_temp" }}'
              sequence:
                - service: light.turn_on
                  data:
                    color_temp: '{{ [state_attr(light,"color_temp")|int - 50, 1]|max }}'
                    transition: 0.25
                  entity_id: !input light
            - conditions: '{{ light_color_mode_id == "hs_color" }}'
              sequence:
                - service: light.turn_on
                  data:
                    hs_color: '{{ [((state_attr(light,"hs_color")[0] or 0) - 15) % 360, 100] }}'
                    transition: 0.25
                  entity_id: !input light
      - conditions: '{{ action == color_up_repeat }}'
        sequence:
          choose:
            - conditions: '{{ light_color_mode_id == "color_temp" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          color_temp: '{{ state_attr(light,"color_temp")|int + 50 }}'
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
            - conditions: '{{ light_color_mode_id == "hs_color" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          hs_color: '{{ [((state_attr(light,"hs_color")[0] or 0) + 15) % 360, 100] }}'
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
      - conditions: '{{ action == color_down_repeat }}'
        sequence:
          choose:
            - conditions: '{{ light_color_mode_id == "color_temp" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          color_temp: '{{ [state_attr(light,"color_temp")|int - 50, 1]|max }}'
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
            - conditions: '{{ light_color_mode_id == "hs_color" }}'
              sequence:
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          hs_color: '{{ [((state_attr(light,"hs_color")[0] or 0) - 15) % 360, 100] }}'
                          transition: 0.25
                        entity_id: !input light
                      - delay:
                          milliseconds: 250
