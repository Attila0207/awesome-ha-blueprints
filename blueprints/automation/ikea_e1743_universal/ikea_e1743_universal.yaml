# Blueprint metadata
blueprint:
  name: IKEA E1743 2-Button Remote - Universal Support
  description: '
    An universal automation for executing any kind of action triggered by an IKEA E1743 remote controller. Allows to optionally loop an action on a button long press.

    Supports Zigbee2MQTT, deCONZ, ZHA.


    Full documentation is available [here](https://epmatt.github.io/awesome-ha-blueprints/blueprints/automation/ikea_e1743_universal).
    '
  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/automation/ikea_e1743_universal/ikea_e1743_universal.yaml
  domain: automation
  input:
    integration:
      name: Integration
      description: Integration used for connecting the remote with Home Assistant. Type "Zigbee2MQTT", "deCONZ" or "ZHA"
    remote:
      name: (ZHA, deCONZ) Remote
      description: The IKEA remote to use for the automation. Choose a value only if the remote is integrated with deCONZ or ZHA.
      default: ''
      selector:
        device:
    zigbee2mqtt_remote:
      name: (Zigbee2MQTT) Remote Action Sensor
      description: The action sensor of the IKEA remote to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    action_up_short:
      name: (Optional) Up button - short press
      description: Action to run on short up button press.
      default: []
      selector:
        action:
    action_up_long:
      name: (Optional) Up button - long press
      description: Action to run on long up button press.
      default: []
      selector:
        action:
    action_up_release:
      name: (Optional) Up button - release after long press
      description: Action to run on up button release after a long press.
      default: []
      selector:
        action:
    action_down_short:
      name: (Optional) Down button - short press
      description: Action to run on short down button press.
      default: []
      selector:
        action:
    action_down_long:
      name: (Optional) Down button - long press
      description: Action to run on long down button press.
      default: []
      selector:
        action:
    action_down_release:
      name: (Optional) Down button - release after long press
      description: Action to run on down button release after a long press.
      default: []
      selector:
        action:
    button_up_long_loop:
      name: Long up button press - loop until release
      description: Loop the action until the button is released.
      default: false
      selector:
        boolean:
    button_down_long_loop:
      name: Long down button press - loop until release
      description: Loop the action until the button is released.
      default: false
      selector:
        boolean:
    helper_last_loop_event_input:
      name: (ZHA, Zigbee2MQTT) Helper - Last Long Press Event
      description: Input Text used to store the last long press event. See docs for more. Provide an entity only if the remote is integrated with ZHA or Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: input_text

# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  button_up_long_loop: !input button_up_long_loop
  button_down_long_loop: !input button_down_long_loop
  helper_last_loop_event_input: !input helper_last_loop_event_input
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # mapping between actions and integrations
  actions_mapping:
    zigbee2mqtt:
      button_up_short: ['on']
      button_up_long: [brightness_move_up]
      button_up_release: [brightness_stop]
      button_down_short: ['off']
      button_down_long: [brightness_move_down]
      button_down_release: [brightness_stop]
    deconz:
      button_up_short: [1002]
      button_up_long: [1001]
      button_up_release: [1003]
      button_down_short: [2002]
      button_down_long: [2001]
      button_down_release: [2003]
    zha:
      button_up_short: ['on']
      button_up_long: [move_with_on_off_0_83]
      button_up_release: [stop]
      button_down_short: ['off']
      button_down_long: [move_1_83]
      button_down_release: [stop]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_up_short: '{{ actions_mapping[integration_id]["button_up_short"] }}'
  button_up_long: '{{ actions_mapping[integration_id]["button_up_long"] }}'
  button_up_release: '{{ actions_mapping[integration_id]["button_up_release"] }}'
  button_down_short: '{{ actions_mapping[integration_id]["button_down_short"] }}'
  button_down_long: '{{ actions_mapping[integration_id]["button_down_long"] }}'
  button_down_release: '{{ actions_mapping[integration_id]["button_down_release"] }}'
  # pre-choose trigger event type based on configured integration (blank for zigbee2mqtt since it uses a different trigger)
  # no need to perform this task at automation runtime
  event_type: '
  {% if integration_id == "zha" %}
  zha_event
  {% elif integration_id == "deconz" %}
  deconz_event
  {% endif %}
  '
  # integrations which need to store the previous long press event to determine which button was released
  integrations_with_prev_event_storage: [zha, zigbee2mqtt]

# mode restart ensures hold actions are interrupted when the corresponding release action is received
mode: restart
max_exceeded: silent

trigger: 
# trigger for zigbee2mqtt
- platform: state
  from: ''
  entity_id: !input zigbee2mqtt_remote
# trigger for other integrations
- platform: event
  event_type: '{{ event_type }}'
  event_data:
    device_id: !input remote
condition:
action:
# extract button event from the trigger
# provide a single string value to check against
- variables:
    trigger_action: '
    {% if integration_id == "zigbee2mqtt" %}
    {{ trigger.to_state.attributes.action }}
    {% elif integration_id == "deconz" %}
    {{ trigger.event.data.event }}
    {% elif integration_id == "zha" %}
    {{ trigger.event.data.command }}_{{ trigger.event.data.args|join("_") }}
    {% endif %}
    '
# choose the sequence to run based on the received button event
- choose:
  - conditions: "{{ trigger_action in button_up_short }}"
    sequence: !input action_up_short
  - conditions: "{{ trigger_action in button_up_long }}"
    sequence:
    # for zha and zigbee2mqtt integrations, store the button event only if a release action has been provided (else the check would be useless)
    - choose:
      - conditions:
        - '{{ integration_id in integrations_with_prev_event_storage }}'
        - '{{ action_up_release != "" }}'
        sequence: 
        - service: 'input_text.set_value'
          data:
            entity_id: !input helper_last_loop_event_input
            value: '{{ trigger_action }}'
    # if looping is enabled, loop the action indefinitely
    # repeat until the automation is restarted ie. when the corresponding release message is received
    - repeat:
        sequence: !input action_up_long
        until: '{{ not button_up_long_loop }}'
  - conditions:
    - '{{ trigger_action in button_up_release }}'
    # for the zha and zigbee2mqtt integrations, need to check the previous button event, stored in the provided input_text
    - '{{ not integration_id in integrations_with_prev_event_storage or states(helper_last_loop_event_input) in button_up_long }}'
    sequence: !input action_up_release
  - conditions: "{{ trigger_action in button_down_short }}"
    sequence: !input action_down_short
  - conditions: "{{ trigger_action in button_down_long }}"
    sequence:
    # for zha and zigbee2mqtt integrations, store the button event only if a release action has been provided (else the check would be useless)
    - choose:
      - conditions:
        - '{{ integration_id in integrations_with_prev_event_storage }}'
        - '{{ action_down_release != "" }}'
        sequence: 
        - service: 'input_text.set_value'
          data:
            entity_id: !input helper_last_loop_event_input
            value: '{{ trigger_action }}'
    # if looping is enabled, loop the action indefinitely
    # repeat until the automation is restarted ie. when the corresponding release message is received
    - repeat:
        sequence: !input action_down_long
        until: '{{ not button_down_long_loop }}'
  - conditions:
    - '{{ trigger_action in button_down_release }}'
    # for zha and zigbee2mqtt integrations, need to check the previous button event, stored in the provided input_text
    - '{{ not integration_id in integrations_with_prev_event_storage or states(helper_last_loop_event_input) in button_down_long }}'
    sequence: !input action_down_release
  default:
